# Design Decisions for Rømer Chain DevNet

## Validator Identity and Location

Our first task in building the devnet is establishing validator identity and location verification. Each validator needs a secure Ed25519 public-private key pair, which we store locally to maintain consistent identity across node restarts.

Location verification presents a more complex challenge. We're currently evaluating two approaches:
- Self-reported coordinates with future IP-based oracle verification
- MaxMind IP range integration in genesis state

Both approaches have trade-offs. We've temporarily deferred this decision to focus on other critical components.

## Physical Hardware Verification

A core principle of Rømer Chain is the requirement for physical hardware. Our implementation actively detects virtualization, preventing nodes from running in cloud environments or virtual machines. This creates a natural barrier to centralization and ensures geographic distribution of network resources.

## Genesis Block Implementation

Our block structure forms the foundation of the blockchain, using fixed-size arrays for cryptographic values to ensure consistency and security. We've implemented this using straightforward Rust structures with explicit field sizes:

For BlockHeader, we store timestamps as nanoseconds since the Unix epoch in a u64, providing precise ordering while preventing timestamp collisions. We use 32-byte arrays for all cryptographic values - previous hash, transaction root, state root, and validator public key - ensuring consistent sizing across the network.

## Hashing Mechanisms

Our implementation includes three distinct hashing approaches, all built using the Commonware cryptography primitives:

### Block Hashing
We create deterministic block hashes by carefully serializing each field in a fixed order using little-endian encoding. Our BlockHasher processes:
- view as u32
- height as u64
- timestamp as u64 nanoseconds
- three 32-byte hashes (previous, transactions, state)
- validator's 32-byte public key

### Transaction Merkle Root
We've implemented a binary Merkle tree for transaction organization. For each transaction, we hash:
- A discriminant byte for the transaction type
- Fixed-size arrays for addresses
- Little-endian encoded amounts and nonces
- Transaction signature

The Merkle tree implementation handles empty transaction lists and ensures deterministic results by duplicating the last hash when necessary for odd numbers of transactions.

### State Root
Our current implementation provides a simple but deterministic approach for state management, sorting address-balance pairs before hashing to ensure consistency across all nodes. While this serves our immediate needs for devnet, it provides a foundation for future upgrades to more sophisticated structures like Merkle Patricia Tries.

## Future Considerations

As development continues, we'll need to address:
- Implementation of the chosen location verification system
- Potential upgrades to the state root structure
- Development of state synchronization protocols
- Integration with physical infrastructure verification

Our current implementation provides a solid foundation through consistent handling of cryptographic values and deterministic hashing approaches, while maintaining flexibility for future enhancements.

This design allows us to focus on core functionality while keeping the door open for more sophisticated features as the network matures. The use of fixed-size arrays and deterministic serialization ensures consistent behavior across all nodes in the network.